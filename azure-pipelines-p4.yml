parameters:
- name: ENV
  displayName: 'Environment'
  type: string
  default: 'dev'
  values:
    - 'dev'
    - 'prod'

- name: ACTION
  displayName: 'Action'
  type: string
  default: 'apply'
  values:
    - 'apply'
    - 'destroy'

trigger:
- main

pr:
- '*'

pool:
  name: 'self-hosted-agent-pool'

variables:
  AWS_SERVICE_CONNECTION: 'Terraform'
  ACTION: ${{ parameters.ACTION }}

stages:
- stage: InitAndPlan
  jobs:
  - job: TerraformInitAndPlan
    displayName: 'Terraform Init and Plan'
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
      displayName: 'Install unzip'

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
      displayName: 'Terraform Init'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'plan'
        environmentServiceNameAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-var-file=${{ parameters.ENV }}.tfvars'
      displayName: 'Terraform Plan'

- stage: Apply
  condition: and(eq(variables['Build.Reason'], 'Merge'), eq(variables['ACTION'], 'apply'))
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
      displayName: 'Terraform Init'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'apply'
        environmentServiceNameAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-auto-approve -var-file=${{ parameters.ENV }}.tfvars'
      displayName: 'Terraform Apply'

- stage: Destroy
  condition: and(eq(variables['Build.Reason'], 'Merge'), eq(variables['ACTION'], 'destroy'))
  jobs:
  - job: TerraformDestroy
    displayName: 'Terraform Destroy'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
      displayName: 'Terraform Init'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'aws'
        command: 'destroy'
        environmentServiceNameAWS: $(AWS_SERVICE_CONNECTION)
        backendAWSBucketName: 'azure-bucket-lab'
        backendAWSKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-auto-approve -var-file=${{ parameters.ENV }}.tfvars'
      displayName: 'Terraform Destroy'
